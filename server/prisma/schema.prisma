// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model chats {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  clientId       String @db.ObjectId
  practitionerId String @db.ObjectId
  createdAt      DateTime @default(now()) @db.Date
  updatedAt      DateTime @updatedAt @db.Date

  // Relations
  client       users @relation("ClientChats", fields: [clientId], references: [id])
  practitioner users @relation("PractitionerChats", fields: [practitionerId], references: [id])
  messages     messages[]

  @@unique([practitionerId, clientId])
}

model intake_forms {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  // Add your intake form fields here
}

model invitations {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  clientEmail    String
  createdAt      DateTime @default(now()) @db.Date
  expiresAt      DateTime @db.Date
  intakeFormId   String?  @db.ObjectId
  isAccepted     Boolean  @default(false)
  practitionerId String   @db.ObjectId
  token          String   @unique
  updatedAt      DateTime @updatedAt @db.Date

  // Relations
  practitioner users @relation(fields: [practitionerId], references: [id])

  @@unique([practitionerId, clientEmail])
}

model messages {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String   @db.ObjectId
  senderId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  // Relations
  chat   chats @relation(fields: [chatId], references: [id])
  sender users @relation("SentMessages", fields: [senderId], references: [id])
}

model otps {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now()) @db.Date
  email      String   @unique
  expiresAt  DateTime @db.Date
  otp        String
  updated_at DateTime @updatedAt @db.Date
}

model questions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  // Add your question fields here
}

model users {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at        DateTime @default(now()) @db.Date
  email             String   @unique
  is_active         Boolean  @default(true)
  is_email_verified Boolean  @default(false)
  name              String
  practitionerId    String?  @db.ObjectId
  profession        String?
  role              String   // Consider using enum: @db.String enum: ["client", "practitioner", "admin"]
  updated_at        DateTime @updatedAt @db.Date

  // Relations
  clientChats       chats[]       @relation("ClientChats")
  practitionerChats chats[]       @relation("PractitionerChats")
  sentMessages      messages[]    @relation("SentMessages")
  invitations       invitations[]
}